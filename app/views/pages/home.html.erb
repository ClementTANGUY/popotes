<div class="wrapper" style="background-image: linear-gradient(-225deg, rgba(0,101,168,0.6) 0%, rgba(0,36,61,0.6) 50%), url('<%= image_url "lunchbreak.jpg" %>');">
  <div class="container">
    <h1>POPOTES </h1>
    <h2>
      Pour ta pause déjeuner, partage du vrai fait maison
    </h2>

    <p>&nbsp;</p>

    <p >
      Commande à un collègue ou un particulier près de ton boulot<br>
      Récupère ton plat au bureau ou au coin de la rue 
    </p>

    <p>&nbsp;</p>

    <div class="container">
      <div class="row">
        <div class="col-sm-8 col-sm-offset-2">
          <div class="find_search">
            <div class="panel panel-transparent">
              <div class="panel-body">
                <%= form_tag cooks_path, method: :get, class:"row" do %>
                  <div class="col-sm-10">
                    <%= text_field_tag :location, params[:location], id:"user_input_autocomplete_address", class: "form-control", placeholder: "Entrez une adresse"%>
                  </div>
                  <div class="col-sm-2">
                    <%= submit_tag "Trouvez !", class: "btn btn-popote" %>
                  </div>
                <% end %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="container">
  <p class="home-banner">
    Enseignes innombrables, concepts insensés, prix forts & minis portions, malbouffe, paude dej' express, gâchis...<br>
    <em>
      "Nous avons pensé à tout ceux qui cuisinent, qui portent de quoi manger au boulot... et à ceux qui ne peuvent pas."<br>
    </em>
  </p>
    <p>&nbsp;</p>
  <p class="home-banner">
    T'emmènes ta gamelle au travail ?<br>
    Tu cuisines toujours pour un régiment ?<br>
    Partage ta cuisine avec tes collègues ou d'autres particuliers à proximité de ton lieu de travail
  </p>
</div>

<!-- Custom JS code to bind to Autocomplete API -->
<% content_for(:after_js) do %>

  <script type="text/javascript">
    function initializeAutocomplete(id) {
      var element = document.getElementById(id);
      var options = { types: ['geocode'],
          componentRestrictions: {country: 'fr'}
      };
      if (element) {
        var autocomplete = new google.maps.places.Autocomplete(element, options);
        google.maps.event.addListener(autocomplete, 'place_changed', onPlaceChanged);
      }
    }
    function onPlaceChanged() {
      var place = this.getPlace();
      // console.log(place);  // Uncomment this line to view the full object returned by Google API.
      for (var i in place.address_components) {
        var component = place.address_components[i];
         for (var j in component.types) {  // Some types are ["country", "political"]
          var type_element = document.getElementById(component.types[j]);
          if (type_element) {
            type_element.value = component.long_name;
          }
        }
      }
    }
    google.maps.event.addDomListener(window, 'load', function() {
      initializeAutocomplete('user_input_autocomplete_address');
    });
  </script>

<% end %>


